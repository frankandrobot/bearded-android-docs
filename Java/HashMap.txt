Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-09-08T11:10:42-04:00

====== HashMap ======
Created Sunday 08 September 2013

The HashMap class is roughly equivalent to HashTable, except that it is unsynchronized and permits nulls. (HashMap allows null values as key and value whereas Hashtable doesnt allow). HashMap does not guarantee that the order of the map will remain constant over time. HashMap is unsynchronized and Hashtable is synchronized. 

What are the differences between Map, [[HashTable]], [[HashMap]], [[TreeMap]], [[ConcurrentHashMap]], [[LinkedHashMap]]?

* Map is an interface for a key-value map
* HashMap is a Map that uses a hash table for its implementation
* HashTable is a synchronized version of [[HashMap]] - it is very slow
* TreeMap uses a tree to implement a map
* ConcurrentHashMap allows for multiple threads to access it at the same time safely
* LinkedHashMap preserves the iteration order that things were inserted in (others donâ€™t provide a fixed iteration order)

====== Keys ======
To use a class as a key, you must (correctly) implement #equals and #hashCode.
[[HashMap]] works by calling the key's #hashCode method. A [[HashCode]] need not always be unique. Keys with the same [[HashCode]] map to the same bucket. [[HashMap]] then uses the key's #equals method to find a match in the bucket. Obviously, if #equals doesn't work as expected, then [[HashMap]] may enter the same object twice in the hash map or get the wrong object.
 
See the [[http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/HashMap.java|HashMap source code]].

Implementing #hashCode incorrectly degrades a [[HashMaps]] performance. [[HashMap]] ANDs a hash code with the hash map capacity to get the bucket to store the key/value pair. Obviously, if your #hashCode function always returns the same lower bits, then you will basically reduce the [[HashMap]] into a [[LinkedList]] --- #get then runs in linear time. 
