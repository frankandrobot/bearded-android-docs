Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-12-12T13:50:58-05:00

====== BatchModeBackPropagation ======
Created Thursday 12 December 2013

Step 0. [[Parameters|Pick values for the learning and momentum parameters]].

Step 1. [[WeightInitialization|Initialize the weights]].

Step 2. Go through each training example:
* 2a. Perform the //forward propagation//. Starting with the input layer, store each [[NeuralNetworks:Neuron|neuron's]] induced local field and impulse function value.
* 2b. Perform the //backpropagation//. Starting with the output layer, [[CalculateGradients|calculate the gradients of each neuron]]. Make sure to store the gradients.
* 2c. [[+UpdatingTheLearningTerms|Update]] the cumulative [[LearningTerm|learning terms]] for each weight of each neuron starting with the output layer.
* 2d. Discard the stored induced local fields, impulse functions, and gradients.

Step 3. Adjust each weight using its cumulative learning term and momentum term. Make sure to store the values of the previous weights.
Step 4. Construct the error function from the training examples.

Step 5. Repeat steps 2--4 until the error is smaller than a pre-selected value. If the error never converges, pick new backpropagation parameters and restart from Step 0.

**Notes:** 
1. Its called the //backpropagation //algorithm because you start from the output layer (Steps 2b and c) and work backwards to the input layer.
2. Steps 2--4 are one iteration of the backpropagation algorithm.
3. A common mistake is adjust the weights before cycling through all the examples. You need to calculate a weight's //cumulative //learning term (from all the examples) before updating it.

===== Required Memory and Data Structures =====
You'll need data structure(s) to store:

* induced local fields and the values of the impulse functions of its neurons //for each layer//. Since these are just used to find the gradients and the learning terms, you do not need to store this data for each example. The data structure(s) can be shared by each example.
* gradients of the neurons of each layer. //Ditto.// Since these are just used to find the learning terms, you do not need to store this data for each example. The data structure(s) can be shared by each example.
* learning terms for the weights of the neurons in each layer. These represent the //cumulative //learning terms of all examples, so all you need is one set of data structure(s) per iteration.
* //previous //weight values (these are used by the momentum term). You do not need to store the complete history of the weights, just the previous values.

===== Adjusting the Weights =====
This is how to adjust the weights:

* Let `w_(kj)^(**(l))` be the //previous// value of the weight. 
* If there is no previous value, let `w_(kj)^(**(l)) = 0`.
* Let `sum_i Delta w_(kj)^((l))(i)` be the cumulative sum of the learning terms for `w_(kj)^((l))` for all the training examples. 
* Let `alpha` be the momentum term.

Adjust the weights using this formula:

`\ w_(kj)^((l)) = w_(kj)^((l)) + alpha w_(kj)^(**(l)) + sum_i Delta w_(kj)^((l))(i)`
`\ \ \ \ = w_(kj)^((l)) + alpha w_(kj)^(**(l)) + eta sum_i delta_k^((l))(i) y_j^((l-1))(i)`

**Note: **`alpha w_(kj)^(**(l))` is the momentum term.

===== Constructing the Error Function =====
* Let `{bb x(i), bb t(i)}` be the `p` training examples. 
* Let `bb o(i)` be the actual output of the network for training input `bb x(i)`. 
**Note:**
1. Each `bb x(i)` and `bb t(i)` are vectors, `bb x(i) = (x_1(i), ...,  x_n(i))` and `bb t(i) = (t_1(i), ..., t_n(i))`. 
2. Each `t_j(i)` is the expected output of the ith training example for the jth neuron in the output layer.
3. `bb o(i)` is a vector `o_1(i), ..., o_n(i)`.
4. `o_j(i)` is the output (value of the impulse function) of neuron `N_j` in the output layer for input `bb x(i)`. 

With these definitions, `bb o(i) - bb t(i)` is the difference in the expected and actual values. We seek to minimize these differences for all training examples:

For each training example `i`, construct the error `E_i`

`\ E_i = 1/2 ||bb o(i) - bb t(i)||^2`

where `||*||` is the [[NeuralNetworks:Appendix:EuclidianDistance|euclidian distance]].  Since we're dealing with vectors, each `E_i` actually looks like this:

`\ E_i = 1/2 (o_1(i) - t_1(i))^2 + cdots + (o_n(i) - t_n(i))^2`

Construct the total error `E` of the network for all training examples:

`\ E = sum_i^p E_i = 1/2 sum_i^p ||bb o(i) - bb t(i)||^2 = 1/2 sum_i^p (o_1(i) - t_1(i))^2 + cdots + (o_n(i) - t_n(i))^2`

Repeat another iteration of the backpropagation algorithm until the error is less than a pre-selected amount.

====== Troubleshooting ======
* Unit test, unit test, unit test. You'll be suprised how easy it is to introduce a typo that breaks your implementation.
* The error never converges? Make sure you know how the [[Parameters|backpropagation parameters]] work.
